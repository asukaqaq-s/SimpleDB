#ifndef CONNECTION_ADAPTER_CC
#define CONNECTION_ADAPTER_CC

#include "jdbc/connection_adapter.h"


namespace SimpleDB {
void ConnectionAdapter::clearWarnings() {
  throw sql::SQLException("operation not implemented");
}

sql::Statement *ConnectionAdapter::createStatement() {
  throw sql::SQLException("operation not implemented");
}

void ConnectionAdapter::close() {
  throw sql::SQLException("operation not implemented");
}

void ConnectionAdapter::commit() {
  throw sql::SQLException("operation not implemented");
}

bool ConnectionAdapter::getAutoCommit() {
  throw sql::SQLException("operation not implemented");
}

sql::SQLString ConnectionAdapter::getCatalog() {
  throw sql::SQLException("operation not implemented");
}

sql::Driver *ConnectionAdapter::getDriver() {
  throw sql::SQLException("operation not implemented");
}

sql::SQLString ConnectionAdapter::getSchema() {
  throw sql::SQLException("operation not implemented");
}

sql::SQLString ConnectionAdapter::getClientInfo() {
  throw sql::SQLException("operation not implemented");
}

void ConnectionAdapter::getClientOption(const sql::SQLString &optionName,
                                        void *optionValue) {
  throw sql::SQLException("operation not implemented");
}

sql::SQLString
ConnectionAdapter::getClientOption(const sql::SQLString &optionName) {
  throw sql::SQLException("operation not implemented");
}

sql::DatabaseMetaData *ConnectionAdapter::getMetaData() {
  throw sql::SQLException("operation not implemented");
}

sql::enum_transaction_isolation ConnectionAdapter::getTransactionIsolation() {
  throw sql::SQLException("operation not implemented");
}

const sql::SQLWarning *ConnectionAdapter::getWarnings() {
  throw sql::SQLException("operation not implemented");
}

bool ConnectionAdapter::isClosed() {
  throw sql::SQLException("operation not implemented");
}

bool ConnectionAdapter::isReadOnly() {
  throw sql::SQLException("operation not implemented");
}

bool ConnectionAdapter::isValid() {
  throw sql::SQLException("operation not implemented");
}

bool ConnectionAdapter::reconnect() {
  throw sql::SQLException("operation not implemented");
}

sql::SQLString ConnectionAdapter::nativeSQL(const sql::SQLString &sql) {
  throw sql::SQLException("operation not implemented");
}

sql::PreparedStatement *
ConnectionAdapter::prepareStatement(const sql::SQLString &sql) {
  throw sql::SQLException("operation not implemented");
}

sql::PreparedStatement *
ConnectionAdapter::prepareStatement(const sql::SQLString &sql,
                                    int autoGeneratedKeys) {
  throw sql::SQLException("operation not implemented");
}

sql::PreparedStatement *
ConnectionAdapter::prepareStatement(const sql::SQLString &sql,
                                    int *columnIndexes) {
  throw sql::SQLException("operation not implemented");
}

sql::PreparedStatement *ConnectionAdapter::prepareStatement(
    const sql::SQLString &sql, int resultSetType, int resultSetConcurrency) {
  throw sql::SQLException("operation not implemented");
}

sql::PreparedStatement *
ConnectionAdapter::prepareStatement(const sql::SQLString &sql,
                                    int resultSetType, int resultSetConcurrency,
                                    int resultSetHoldability) {
  throw sql::SQLException("operation not implemented");
}

sql::PreparedStatement *
ConnectionAdapter::prepareStatement(const sql::SQLString &sql,
                                    sql::SQLString columnNames[]) {
  throw sql::SQLException("operation not implemented");
}

void ConnectionAdapter::releaseSavepoint(sql::Savepoint *savepoint) {
  throw sql::SQLException("operation not implemented");
}

void ConnectionAdapter::rollback() {
  throw sql::SQLException("operation not implemented");
}

void ConnectionAdapter::rollback(sql::Savepoint *savepoint) {
  throw sql::SQLException("operation not implemented");
}

void ConnectionAdapter::setAutoCommit(bool autoCommit) {
  throw sql::SQLException("operation not implemented");
}

void ConnectionAdapter::setCatalog(const sql::SQLString &catalog) {
  throw sql::SQLException("operation not implemented");
}

void ConnectionAdapter::setSchema(const sql::SQLString &catalog) {
  throw sql::SQLException("operation not implemented");
}

sql::Connection *
ConnectionAdapter::setClientOption(const sql::SQLString &optionName,
                                   const void *optionValue) {
  throw sql::SQLException("operation not implemented");
}

sql::Connection *
ConnectionAdapter::setClientOption(const sql::SQLString &optionName,
                                   const sql::SQLString &optionValue) {
  throw sql::SQLException("operation not implemented");
}

void ConnectionAdapter::setHoldability(int holdability) {
  throw sql::SQLException("operation not implemented");
}

void ConnectionAdapter::setReadOnly(bool readOnly) {
  throw sql::SQLException("operation not implemented");
}

sql::Savepoint *ConnectionAdapter::setSavepoint() {
  throw sql::SQLException("operation not implemented");
}

sql::Savepoint *ConnectionAdapter::setSavepoint(const sql::SQLString &name) {
  throw sql::SQLException("operation not implemented");
}

void ConnectionAdapter::setTransactionIsolation(
    sql::enum_transaction_isolation level) {
  throw sql::SQLException("operation not implemented");
}

} // namespace SimpleDB


#endif